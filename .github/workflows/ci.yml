name: CI Pipeline with Render Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install gunicorn flask

      - name: Run tests
        run: |
          python -m pytest || true

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip jq

      - name: Install Render CLI
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/render-oss/cli/releases/latest | jq -r '.tag_name' || echo "")
          if [ -z "$LATEST_RELEASE" ] || [ "$LATEST_RELEASE" == "null" ]; then 
            echo "Erro: Não foi possível obter a versão mais recente do Render CLI!" 
            exit 1
          fi
          echo "Latest release: $LATEST_RELEASE"
          
          DOWNLOAD_URL="https://github.com/render-oss/cli/releases/download/v2.0.0/cli_2.0.0_linux_amd64.zip"
          if ! curl --output /dev/null --silent --head --fail "$DOWNLOAD_URL"; then
            echo "Erro: URL de download inválida - $DOWNLOAD_URL"
            exit 1
          fi
          
          curl -fsSL "$DOWNLOAD_URL" -o render.zip
          unzip render.zip -d render_cli
          chmod +x render_cli/cli_${LATEST_RELEASE}
          sudo mv render_cli/cli_${LATEST_RELEASE} /usr/local/bin/render
          
          if ! /usr/local/bin/render --version; then 
            echo "Erro: Render CLI não foi instalada corretamente!"
            exit 1
          fi

      - name: Set Render Workspace
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          set -x
          RAW_JSON=$(render workspace list -o json)
          echo "Raw JSON: $RAW_JSON"
          
          WORKSPACE_NAME=$(echo "$RAW_JSON" | jq -r 'if length > 0 then .[0].workspace.id else empty end')
          
          if [ -z "$WORKSPACE_NAME" ]; then 
            echo "Erro: Nenhum workspace encontrado!" 
            exit 1
          fi
          
          render workspace set "$WORKSPACE_NAME"

      - name: Get Render Service ID
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          SERVICE_ID=$(render services list -o json | jq -r '.[] | select(.service.name=="implementacao").service.id')
          if [ -z "$SERVICE_ID" ]; then echo "Erro: Serviço 'implementacao' não encontrado!" && exit 1; fi
          echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          render deploys create $SERVICE_ID -o text

      - name: Get Service URL
        run: |
          SERVICE_URL=$(render services list -o json | jq -r '.[] | select(.service.id=="'$SERVICE_ID'").service.serviceDetails.url')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Display Service URL
        run: |
          echo "A aplicação está disponível em: $SERVICE_URL"

      - name: Start Gunicorn for Flask
        run: |
          gunicorn -w 4 -b 0.0.0.0:8000 main:app
