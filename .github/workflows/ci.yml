name: CI Pipeline with Render Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # 1. Faz checkout do código do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configura o Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  # Substitua pela versão do Python do seu projeto

      # 3. Instala as dependências
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Executa os testes
      - name: Run tests
        run: |
          python -m pytest || true  # Evita falha na pipeline se os testes falharem

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Garante que o deploy só ocorra após os testes passarem
    if: github.ref == 'refs/heads/main'  # Executa o deploy apenas no branch main

    steps:
      # 1. Faz checkout do código do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Instala dependências do sistema (unzip e jq)
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip jq

      # 3. Baixa e instala a CLI do Render
      - name: Install Render CLI
        run: |
          curl -L https://github.com/render-oss/cli/releases/download/v1.1.0/cli_1.1.0_linux_amd64.zip -o render.zip
          unzip -o render.zip
          sudo mv cli_v1.1.0 /usr/local/bin/render
          chmod +x /usr/local/bin/render

      # 4. Verifica se a CLI foi instalada corretamente
      - name: Verify Render CLI installation
        run: |
          which render
          render --version

      # 5. Exporta a API Key para o ambiente
      - name: Set Render API Key
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "RENDER_API_KEY está definido."

      # 6. Obtém o ID do serviço Render
      - name: Get Render Service ID
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          SERVICE_ID=$(render services list -o json | jq -r '.[] | select(.service.name=="implementacao").service.id')
          if [ -z "$SERVICE_ID" ]; then echo "Erro: Serviço 'implementacao' não encontrado!" && exit 1; fi
          echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV

      # 7. Executa o deploy na Render usando o ID do serviço
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          render deploys create $SERVICE_ID -o text

      # 8. Obtém a URL do serviço
      - name: Get Service URL
        run: |
          SERVICE_URL=$(render services list -o json | jq -r '.[] | select(.service.id=="'$SERVICE_ID'").service.serviceDetails.url')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      # 9. Exibe a URL do serviço
      - name: Display Service URL
        run: |
          echo "A aplicação está disponível em: $SERVICE_URL"
