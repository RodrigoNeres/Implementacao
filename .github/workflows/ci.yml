name: CI Pipeline with Render Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install gunicorn  # Garante que gunicorn esteja instalado

      - name: Run tests
        run: |
          python -m pytest || true  # Evita falha na pipeline se os testes falharem

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip jq

      - name: Install Render CLI
        run: |
          curl -fsSL https://github.com/render-oss/cli/releases/latest/download/render-linux-amd64 -o render
          chmod +x render
          sudo mv render /usr/local/bin/render
          render --version || (echo "Erro: Render CLI não foi instalada corretamente!" && exit 1)

      - name: Set Render Workspace
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          render login --api-key $RENDER_API_KEY
          render workspace set default || echo "Nenhum workspace foi definido."

      - name: Get Render Service ID
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          SERVICE_ID=$(render services list -o json | jq -r '.[] | select(.service.name=="implementacao").service.id')
          if [ -z "$SERVICE_ID" ]; then echo "Erro: Serviço 'implementacao' não encontrado!" && exit 1; fi
          echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          render deploys create $SERVICE_ID --confirm --output text

      - name: Get Service URL
        run: |
          SERVICE_URL=$(render services list -o json | jq -r '.[] | select(.service.id=="'$SERVICE_ID'").service.serviceDetails.url')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Display Service URL
        run: |
          echo "A aplicação está disponível em: $SERVICE_URL"
